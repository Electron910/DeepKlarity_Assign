{"ast":null,"code":"import axios from 'axios';\n\n// This will use the production URL when deployed\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconsole.log('API Base URL:', API_BASE_URL);\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 60000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\naxiosInstance.interceptors.request.use(config => {\n  var _config$method;\n  console.log('API Request:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n}, error => {\n  console.error('Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\naxiosInstance.interceptors.response.use(response => {\n  console.log('API Response:', response.status);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('Response Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, error.message);\n  return Promise.reject(error);\n});\nconst api = {\n  uploadResume: (formData, onUploadProgress) => {\n    return axiosInstance.post('/resumes/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress\n    });\n  },\n  getResumes: () => {\n    return axiosInstance.get('/resumes');\n  },\n  getResumeById: id => {\n    return axiosInstance.get(`/resumes/${id}`);\n  },\n  deleteResume: id => {\n    return axiosInstance.delete(`/resumes/${id}`);\n  },\n  checkHealth: () => {\n    return axiosInstance.get('/health');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","console","log","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","message","api","uploadResume","formData","onUploadProgress","post","getResumes","get","getResumeById","id","deleteResume","delete","checkHealth"],"sources":["D:/deepKlarity_pro/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// This will use the production URL when deployed\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconsole.log('API Base URL:', API_BASE_URL);\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 60000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// Request interceptor\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    console.log('API Request:', config.method?.toUpperCase(), config.url);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API Response:', response.status);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('Response Error:', error.response?.status, error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst api = {\r\n  uploadResume: (formData, onUploadProgress) => {\r\n    return axiosInstance.post('/resumes/upload', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n      onUploadProgress,\r\n    });\r\n  },\r\n\r\n  getResumes: () => {\r\n    return axiosInstance.get('/resumes');\r\n  },\r\n\r\n  getResumeById: (id) => {\r\n    return axiosInstance.get(`/resumes/${id}`);\r\n  },\r\n\r\n  deleteResume: (id) => {\r\n    return axiosInstance.delete(`/resumes/${id}`);\r\n  },\r\n  \r\n  checkHealth: () => {\r\n    return axiosInstance.get('/health');\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjFC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEL,YAAY,CAAC;AAE1C,MAAMM,aAAa,GAAGP,KAAK,CAACQ,MAAM,CAAC;EACjCC,OAAO,EAAER,YAAY;EACrBS,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EAAA,IAAAC,cAAA;EACVX,OAAO,CAACC,GAAG,CAAC,cAAc,GAAAU,cAAA,GAAED,MAAM,CAACE,MAAM,cAAAD,cAAA,uBAAbA,cAAA,CAAeE,WAAW,CAAC,CAAC,EAAEH,MAAM,CAACI,GAAG,CAAC;EACrE,OAAOJ,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACTf,OAAO,CAACe,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACtC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,aAAa,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CACpCS,QAAQ,IAAK;EACZlB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEiB,QAAQ,CAACC,MAAM,CAAC;EAC7C,OAAOD,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAK,eAAA;EACTpB,OAAO,CAACe,KAAK,CAAC,iBAAiB,GAAAK,eAAA,GAAEL,KAAK,CAACG,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBD,MAAM,EAAEJ,KAAK,CAACM,OAAO,CAAC;EACvE,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,MAAMO,GAAG,GAAG;EACVC,YAAY,EAAEA,CAACC,QAAQ,EAAEC,gBAAgB,KAAK;IAC5C,OAAOvB,aAAa,CAACwB,IAAI,CAAC,iBAAiB,EAAEF,QAAQ,EAAE;MACrDlB,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDmB;IACF,CAAC,CAAC;EACJ,CAAC;EAEDE,UAAU,EAAEA,CAAA,KAAM;IAChB,OAAOzB,aAAa,CAAC0B,GAAG,CAAC,UAAU,CAAC;EACtC,CAAC;EAEDC,aAAa,EAAGC,EAAE,IAAK;IACrB,OAAO5B,aAAa,CAAC0B,GAAG,CAAC,YAAYE,EAAE,EAAE,CAAC;EAC5C,CAAC;EAEDC,YAAY,EAAGD,EAAE,IAAK;IACpB,OAAO5B,aAAa,CAAC8B,MAAM,CAAC,YAAYF,EAAE,EAAE,CAAC;EAC/C,CAAC;EAEDG,WAAW,EAAEA,CAAA,KAAM;IACjB,OAAO/B,aAAa,CAAC0B,GAAG,CAAC,SAAS,CAAC;EACrC;AACF,CAAC;AAED,eAAeN,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}